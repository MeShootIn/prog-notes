*** СЕТЕВЫЕ ПРОТОКОЛЫ ***



* 4 основных уровня:
1) уровень приложений (FTP, TELNET, HTTP), (DNS, TFTP)
2) транспортный  	      (TCP),	      (UDP)
3) сетевой 	       		      (IP)
4) физический и канальный (Ethernet, Slip, X.25, PPP, ATM) - самый низкий уровень

* инкапсулируют друг друга: HTTP (данные приложения (браузера)) -> TCP (+ HTTP) -> IP (+ HTTP, TCP) -> Ethernet (...)
* каждый раз, когда передаются данные с одного компа (A) на другой (B), если поиск адреса B на текущем уровне сети не был
успешен, то запрос поднимается на уровень выше
* информация, передаваемая через сеть, разделяется на пакеты (процесс коммутации) во избежание потери данных
* порт - 2 байта, число, идентифицирующее веб-приложение в пределах данного IP (80 - веб-сервис, 443 - ftp, >= 1000 -
пользовательские)

* уровни IP:
1) публичный
2) частный
3) локальный

* TCP протокол нужен для контроля порядка, полноты и скорости (размер окна) передачи пакетов

* "Тройное рукопожатие" (им занимается TCP):
1) Клиент: можешь ко мне коннектнуться?
2) Сервер: да, кидай данные
3) Клиент: *кидает*
в это время, каждый пакет отмечается порядковым номером и подсчитываются контрольные суммы

* DNS (Domain Name Service) - сервис, вход - домен, на выходе - IP
все домены в древовидном представлении на DNS-сервере имеют на конце . (корень дерева) и читаются справа налево (.->com->vk),
макс высота дерева - 255
* якорь не передаётся на сервер
* MIME = тип/подтип

* Основные методы HTTP:
1) GET
2) POST
3) HEAD - получить header'ы (например, узнать вес видоса)
4) PUT
эти методы, как и сам HTTP, просто правила, на которые всем пофиг, так что в основном, используются только GET и POST

* Коды ответов:
1xx - инфа (100 - continue)
2хх - успех (200 - OK, 204 - Partial content (частичное содержимое, когда перематываем ползунок на ютубе))
3хх - перенаправление (301 - перемещение навсегда, 302 - временное, 304 - not changed)
4хх - ошибка клиента (401 - кто ты?, 403 - не имеешь прав)
5хх - ошибка сервера (500 - не важно что, просто сломалось)

* управление соединением HTTP:
1) Connection: close (конец)
2) Connection: keep-alive (сохранение соединения, чтобы передать не только html, а ещё и картинки, музыку, одним соединением)

* безопасность HTTP - обмен ключами (публичный - для шифровки другой стороне, приватный - для дешифровки у себя)