### ОБЩЕЕ ###

# Использование: `make [-f <make-файл> (по умолчанию Makefile)]
# [-j <число_потоков>] [...<цель>]`
#
# На основе информации о времени последнего изменения каждого файла make
# определяет и запускает необходимые программы.
#
# По умолчанию make использует самую первую цель в make-файле.
#
# Обязательна табуляция в качестве отступа!
#
# Стандартные цели для сборки дистрибутивов GNU:
# * "all" - выполнить сборку пакета;
# * "install" - установить пакет из дистрибутива;
# * "uninstall" - удалить пакет;
# * "clean" - очистить дистрибутив (удалить скомпилированные объектные и
# исполняемые файлы);
# * "distclean" - "clean" + удалить вспомогательные файлы, созданные утилитой
# "./configure" в процессе настройки параметров компиляции дистрибутива.
#
# Общий вид правила:
# цель_1 цель_2 ...: реквизит_1 реквизит_2 ...
# 	команда_1
# 	команда_2
# 	...
#
# make проверяет наличие файлов-реквизитов перед выполнением команды, а затем
# ставит их в зависимости.



# .SILENT: # без вывода выполняемых команд

# Переменные можно также задавать после вызова цели (например, `make run
# TARGET=prog`).
TARGET = main
SRC_DIR = src/
OBJ_DIR = obj/
MAIN_O = ${OBJ_DIR}main.o
SUM_O = ${OBJ_DIR}sum.o
MAIN_C = ${SRC_DIR}main.c
SUM_C = ${SRC_DIR}sum.c

# Сначала выполняются кастомные цели (следующие в одной строке после ":"), затем
# блочные (консольные).
${TARGET}: mkdir_obj ${SUM_O} ${MAIN_O}
	gcc -Wall -o ${TARGET} ${MAIN_O} ${SUM_O}

${MAIN_O}: ${MAIN_C}
	gcc -Wall -c -o ${MAIN_O} ${MAIN_C}

${SUM_O}: ${SUM_C}
	gcc -Wall -c -o ${SUM_O} ${SUM_C}

mkdir_obj:
	mkdir -p ${OBJ_DIR}

build-and-run: ${TARGET} run

run:
	./${TARGET}

clean:
	rm -f ${TARGET}
	rm -rf ${OBJ_DIR}

# Если бы существовала папка "./run" или "./clean", никак не связанная с
# одноименной целью, то при последующем выполнении `make run` утилита выдала бы
# "make: `run` is up to date", т.к. make воспринимает её как папку с выполненной
# задачей "run" (в силу предназначения make). Чтобы этого избежать, надо
# отвязать задачу от файловой структуры:
.PHONY: mkdir_obj build-and-run run clean
